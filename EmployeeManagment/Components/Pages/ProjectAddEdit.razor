@using EmployeeManagment.Data.DTOs
@using EmployeeManagment.Data.Service

@inject IProjectService projectService
@inject NavigationManager navigationManager

@rendermode InteractiveServer

@if (IsVisible)
{
    <div class="modal show" role="dialog" style="display:block">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">New Project</h2>
                </div>
                <div class="modal-body">
                    <EditForm Model="@selectedProject" OnValidSubmit="ValidScreeningSubmitted" OnInvalidSubmit="InvalidScreeningSubmitted">
                        <DataAnnotationsValidator />
                        <div class="list-group">
                            <label class="label">Project Name</label>
                            <input Type="text" @bind="selectedProject.Name" />
                            <ValidationMessage For="() => selectedProject.Name" />
                        </div>
                        <div class="list-group">
                            <label class="label">Client Name</label>
                            <input Type="text" @bind="selectedProject.ClientName" />
                            <ValidationMessage For="() => selectedProject.ClientName" />
                        </div>
                        <div class="list-group">
                            <label class="label">Notes</label>
                            <input Type="text" @bind="selectedProject.Description" />
                            <ValidationMessage For="() => selectedProject.Description" />
                        </div>

                        <div class="modal-footer">
                            <input type="submit" class="btn btn-primary" value="Save" />
                            <button class="btn btn-secondary" data-dismiss="modal" @onclick="CloseClick">Close</button>
                        </div>
                    </EditForm>
                </div>
               
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public ProjectDTO selectedProject { get; set; }

    [Parameter]
    public EventCallback CloseCallback { get; set; }

    private async void CloseClick()
    {
        await CloseCallback.InvokeAsync();
        navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
    }

    void ValidScreeningSubmitted(EditContext editContext)
    {


        if (selectedProject.Id == null)
        {
            projectService.AddProjectAsync(selectedProject);
        }
        else
        {
            projectService.EditProjectAsync(selectedProject);
        }
    }

    void InvalidScreeningSubmitted(EditContext editContext)
    {

    }
}
